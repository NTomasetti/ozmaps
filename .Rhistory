plot(wrld_simpl, add = TRUE, border = "red")
library(rmapshaper)
aus <- ms_simplify(state, keep_shapes = FALSE)
pryr::object_size(aus)
gaus <- st_as_sf(rgeos::gUnionCascaded(as(aus, "Spatial", id = TRUE)))
gaus <- st_as_sf(rgeos::gUnionCascaded(as(aus, "Spatial"), id = T))
gaus
plot(gaus)
gaus <- st_as_sf(rgeos::gUnionCascaded(as(aus, "Spatial")))
plot(gaus)
pryr::object_size(gaus)
aus <- st_set_geometry(aus, gaus)
aus$geometry <- gaus
aus <- ms_simplify(st_as_sf(rgeos::gUnionCascaded(as(aus, "Spatial"))))
pryr::object_size(aus)
plot(aus)
zoom(as(aus$geometry, "Spatial"))
?purrr::map2_dfr
?purrr::map_dfr
names(state)
state
ozboundary <- aus
usethis::use_data(ozboundary)
maps::map(ozboundary)
maps::map(ozboundary$geometry)
tab <- spbabel::sptable(ozboundary)
tab
tab[0, ]
tab %>% group_by(branch_) %>% mutate(n = n())
tab %>% group_by(branch_) %>% mutate(n = n()) %>% slice(seq(1, n[1]))
tab %>% group_by(branch_) %>% mutate(n = n()) %>% slice(c(seq(1, n[1]), 1))
split(tab %>% transmutate(x = x_, y = y_), tab$branch_) %>% purrr::map(~ rbind(.x, set_na(.x)))
split(tab %>% transmute(x = x_, y = y_), tab$branch_) %>% purrr::map(~ rbind(.x, set_na(.x)))
split(tab %>% transmute(x = x_, y = y_), tab$branch_) %>% purrr::map(~ rbind(.x, NA))
split(tab %>% transmute(x = x_, y = y_), tab$branch_) %>% purrr::map_df(~ rbind(.x, NA))
split(tab %>% transmute(x = x_, y = y_), tab$branch_) %>% purrr::map_df(~ rbind(.x, NA)) %>% tail()
split(tab %>% transmute(x = x_, y = y_), tab$branch_) %>% purrr::map_df(~ rbind(.x, NA)) %>% tail(-1)
m <- maps::map()
str(m)
ozboundary <- split(tab %>% transmute(x = x_, y = y_), tab$branch_) %>%
purrr::map_df(~ rbind(.x, NA)) %>%
tail(-1) %>%
as.list()
ozboundary$range <- c(range(tab$x_), range(tab$y_))
ozboundary$names <- as.character(length(unique(tab$branch_)))
class(ozboundary) <- "map"
map(ozboundary)
library(maps)
map(ozboundary)
str(ozboundary)
abline(h = -43.63)
graphics.off()
maps(ozboundary)
map(ozboundary)
map(ozboundary, col = "grey")
map(ozboundary, col = "grey", fill = "grey")
map(ozboundary, col = "grey", fill = T)
st_as_sf(ozboundary)
str(m)
st_as_sf(m)
maps::map(regions = "Australia")
?maps::map
help(package='maps')
sum(is.na(m$x))
m$x
rle(is.na(m$x))
r <- rle(is.na(m$x))
r$lengths[r$values]
range(r$lengths[r$values])
rle(m$names)
range(rle(m$names)$lengths)
## state (33 Mb)
state <- read_psma(fs %>% dplyr::filter(grepl("STATE_POLYGON", file)) %>% dplyr::pull(fullname))
library(rmapshaper)
aus <- ms_simplify(state, keep_shapes = FALSE)
aus <- ms_simplify(st_as_sf(rgeos::gUnionCascaded(as(aus, "Spatial"))))
aus$name <- "Australia"
aus$rmapshaperid <- NULL
ozboundary <- silicate::PATH(aus)
pryr::object_size(ozboundary)
pryr::object_size(aus)
ozboundary
compact_silicate_path <- function(x) {
x$path$object_ <- match(x$path$object_,
x$object$object_)
x$object$object_ <- NULL
x$path_link_vertex$vertex_ <- match(x$path_link_vertex$vertex_,
x$vertex$vertex_)
x$path_link_vertex$vertex_ <- NULL
x$vertex$vertex_ <- NULL
x$path$path_ <- NULL
x
}
x <- compact_silicate_path(ozboundary)
x
compact_silicate_path <- function(x) {
x$path$object_ <- match(x$path$object_,
x$object$object_)
x$object$object_ <- NULL
x$path_link_vertex$vertex_ <- match(x$path_link_vertex$vertex_,
x$vertex$vertex_)
x$path_link_vertex$path_ <- match(x$path_link_vertex$path_,
x$path$path_)
x$vertex$vertex_ <- NULL
x$path$path_ <- NULL
x
}
x <- compact_silicate_path(ozboundary)
x
compact_silicate_path <- function(x) {
x$path$object_ <- match(x$path$object_,
x$object$object_)
x$object$object_ <- NULL
x$path_link_vertex$vertex_ <- match(x$path_link_vertex$vertex_,
x$vertex$vertex_)
x$path_link_vertex$path_ <- match(x$path_link_vertex$path_,
x$path$path_)
x$vertex$vertex_ <- NULL
x$path$path_ <- NULL
x$path$ncol <- NULL
x$object <- NULL
x
}
x <- compact_silicate_path(ozboundary)
x
pryr::object_size(x)
pryr::object_size(aus)
compact_silicate_path <- function(x) {
x$path$object_ <- match(x$path$object_,
x$object$object_)
x$object$object_ <- NULL
x$path_link_vertex$vertex_ <- match(x$path_link_vertex$vertex_,
x$vertex$vertex_)
x$path_link_vertex$path_ <- match(x$path_link_vertex$path_,
x$path$path_)
x$vertex$vertex_ <- NULL
x$path$path_ <- NULL
x$path$ncol <- NULL
x$object$object_ <- NULL
x
}
x <- compact_silicate_path(ozboundary)
x
library(oz)
install.packages("oz")
oz::oz()
oz::oz(states = F)
oz::ozRegion()
oz::oz(states = TRUE, add = TRUE)
plot(147, -42)
oz::oz(states = TRUE, add = TRUE)
os <- oz::ozRegion()
str(os)
oz::oz(states = TRUE, add = FALSE)
?rnaturalearth::ne_countries
o <- rnaturalearth::ne_countries(continent = "australia")
o <- rnaturalearth::ne_countries(continent = "australasia")
o <- rnaturalearth::ne_states(country = "australia")
o <- rnaturalearth::ne_states(country = "australia")
o
plot(o)
library(sp)
plot(o)
pryr::object_size(o)
o <- rnaturalearth::ne_states(country = "australia", scale = "small")
names(o)
o$name
pryr::object_size(oz::ozRegion())
oz::oz()
oz::nsw(add = TRUE, col = "blue")
library(ozmaps)
library(ozmaps)
ozmap()
ozmap(states = FALSE)
ozmap(add = TRUE)
?rnaturalearth::ne_states
ozmap_states <- rnaturalearth::ne_states(country = "australia", returnclass = "sf")
ozmap_states
purrr::map_chr(ozmap_states, class)
purrr::map_chr(ozmap_states, ~class(.x)[1])
unique(purrr::map_chr(ozmap_states, ~class(.x)[1]))
ozmap_states <- rnaturalearth::ne_states(country = "australia", returnclass = "sf") %>%
transmute(name, type, adm1_code, OBJECTID_1)
## ozmap_states
library(dplyr)
ozmap_states <- rnaturalearth::ne_states(country = "australia", returnclass = "sf") %>%
transmute(name, type, adm1_code, OBJECTID_1)
pryr::object_size(ozmap_states)
plot(ozmap_states)
library(sf)
plot(ozmap_states)
ozmap_states
ozmap_states <- rnaturalearth::ne_states(country = "australia", returnclass = "sf") %>%
dplyr::select(name, type, adm1_code, OBJECTID_1)
ozmap_states
ozmap_states <- rnaturalearth::ne_states(country = "australia", returnclass = "sf") %>%
dplyr::select(name, type, adm1_code, OBJECTID_1, geometry)
plot(ozmap_states)
ozmap_states <- rnaturalearth::ne_states(country = "australia", returnclass = "sf") %>%
dplyr::select(name, type, adm1_code, geometry)
usethis::use_data(ozmap_states)
usethis::use_package_doc()
loadNamespace("sf")
requireNamespace("sf", quietly = TRUE)
requireNamespace("sf", quietly = TRUE) %>% str()
inner_join
?usethis::use_data
oz::oz
a <- oz::oz()
str(a)
library(ozmaps)
ozmap(states = FALSE, col = "firebrick", lwd = 2)
ozmap(states = TRUE, add = TRUE)
ozmap(states = FALSE, col = "firebrick", lwd = 4)
ozmap(states = TRUE, add = TRUE)
ozmap(states = FALSE, col = "firebrick", lwd = 4)
ozmap(states = TRUE, add = TRUE, coastline = FALSE)
ozmap(states = TRUE, add = TRUE, coast = FALSE)
ozmap(states = FALSE, col = "firebrick", lwd = 4)
ozmap(states = TRUE, add = TRUE, coast = FALSE)
oz <- oz::ozRegion()
names(oz)
str(oz$lines[[1]])
#names(oz)
#str(oz$lines[[1]])
purrr::map(oz$lines, ~do.call(cbind, .x))
#names(oz)
#str(oz$lines[[1]])
headtail <- function(x) {
x[c(1:dim(x)[1], 1), ]
}
purrr::map(oz$lines, ~headtail(do.call(cbind, .x)))
sf::st_polygon(purrr::map(oz$lines, ~list(headtail(do.call(cbind, .x)))))
x <- purrr::map(oz$lines, ~list(headtail(do.call(cbind, .x))))
length(x)
lengths(x)
x[[]]
x[[1]]
x <- purrr::map(oz$lines, ~sf::st_polygon(list(headtail(do.call(cbind, .x)))))
plot(x)
library(sf)
plot(x)
x
x <- sf::st_sfc(purrr::map(oz$lines, ~sf::st_polygon(list(headtail(do.call(cbind, .x))))))
plot(x)
purrr::map(x$lines, ~length(.x$x))
purrr::map(oz$lines, ~length(.x$x))
oz$lines[[8]]
x <- sf::st_sfc(purrr::map(oz$lines, ~sf::st_linestring(headtail(do.call(cbind, .x)))))
plot(x)
x <- sf::st_sfc(purrr::map(oz$lines, ~sf::st_linestring(do.call(cbind, .x))))
plot(x)
x
names(oz)
ozmaps::ozboundary
ozmaps::ozmap()
ozmaps::ozmap(states = F)
ozmaps::ozmap_states
ozmaps::ozmap_states_data()
ozmaps::ozmap_data()
ozmap_country <- rnaturalearth::ne_countries(country = "australia", returnclass = "sf")
ozmap_country
ozmap_country <- rnaturalearth::ne_countries(country = "australia", returnclass = "sf") %>%
dplyr::select(name, type, adm1_code, geometry)
names(ozmap_country)
ozmap_country$adm0_a3
ozmap_states$adm1_code
ozmap_country$admin
ozmap_country <- rnaturalearth::ne_countries(country = "australia", returnclass = "sf") %>%
dplyr::select(name, type, adm0_a3, geometry)
ozmap_country
st_is_valid(ozmap_country)
st_is_valid(ozmap_states)
usethis::use_data(ozmap_country)
library(ozmaps)
library(ozmaps)
library(dplyr)
library(sf)
library(rmapshaper)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
knitr::read_chunk("data-raw/download_2016.R")
sf_oz <- ozmap_data("ozmap_states")
nrow(sf_oz)
names(sf_oz)
sf_oz$name
as_tibble(sf_oz)
quakes
plot(quakes)
plot(quakes[c("long", "lat")])
data()
plot(quakes[c("long", "lat")], xlim = c(120, 190))
ozmap(add = TRUE)
library(dplyr)
library(sf)
library(rmapshaper)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
knitr::read_chunk("data-raw/download_2016.R")
library(ozmaps)
ozmap()
ozmap(states = FALSE)
plot(quakes[c("long", "lat")], xlim = c(120, 190))
ozmap(add = TRUE)
sf_oz <- ozmap_data("ozmap_states")
tibble::as_tibble(sf_oz)
sf_oz
install.packages("ochRe")
devtools::install_github("ropenscilabs/ochRe")
ochRe::ochre_pal(dim(sf_oz)[1L])
ochRe::ochre_pal()(dim(sf_oz)[1])
library(sf)
plot(sf_oz, col = ochRe::ochre_pal()(dim(sf_oz)[1]))
library(sf)
plot(st_geometry(sf_oz), col = ochRe::ochre_pal()(dim(sf_oz)[1]))
## soon...plot directly with ggplot2
ggplot2::ggplot(sf_oz, aes(colour = name))
## soon...plot directly with ggplot2
library(ggplot2)
ggplot(sf_oz, aes(colour = name))
ggplot(sf_oz, aes(colour = name)) + geom_sf()
ggplot(sf_oz, aes(fill = name)) + geom_sf()
nmjr <- ochRe::ochre_pal()(dim(sf_oz)[1])
plot(st_geometry(sf_oz), col = nmjr)
ggplot(sf_oz, aes(fill = name)) + geom_sf() + scale_fill_manual(values = nmjr)
ggplot(sf_oz, aes(fill = name)) + geom_sf(crs = "+proj=laea +lon_0=135 +lat_0=-30 +datum=WGS84") + scale_fill_manual(values = nmjr)
ggplot(sf_oz, aes(fill = name)) + geom_sf() + coord_sf(crs = "+proj=laea +lon_0=135 +lat_0=-30 +datum=WGS84") + scale_fill_manual(values = nmjr)
ggplot(sf_oz, aes(fill = name)) + geom_sf() + coord_sf(crs = "+proj=laea +lon_0=135 +lat_0=-45 +datum=WGS84") + scale_fill_manual(values = nmjr)
ggplot(sf_oz, aes(fill = name)) + geom_sf() + coord_sf(crs = "+proj=laea +lon_0=135 +lat_0=-10 +datum=WGS84") + scale_fill_manual(values = nmjr)
ggplot(sf_oz, aes(fill = name)) + geom_sf() + coord_sf(crs = "+proj=lcc +lon_0=135 +lat_0=-30 +lat_1=-10 +lat_2=-45 +datum=WGS84") + scale_fill_manual(values = nmjr)
tempfil()
tempfile()
usethis::use_build_ignore("AUG17_AdminBounds_ESRIShapefileorDBFfile_20170821151234/")
usethis::use_build_ignore("aug17adminboundsesrishapefileordbffile20170821151234.zip")
devtools::load_all(".")
ozmap_data()
class(ozmap_country())
class(ozmap_data())
ozmap_states <- sf::st_as_sf(tibble::as_tibble(ozmap_states))
ozmap_states
usethis::use_data(ozmap_states)
ozmap_country <- rnaturalearth::ne_countries(country = "australia", returnclass = "sf") %>%
dplyr::select(name, type, adm0_a3, geometry)
ozmap_country <- sf::st_as_sf(tibble::as_tibble(ozmap_country))
usethis::use_data(ozmap_country)
library(dplyr)
ozmap_country <- rnaturalearth::ne_countries(country = "australia", returnclass = "sf") %>%
dplyr::select(name, type, adm0_a3, geometry)
ozmap_country <- sf::st_as_sf(tibble::as_tibble(ozmap_country))
usethis::use_data(ozmap_country)
## ozmap_states
library(dplyr)
ozmap_states <- rnaturalearth::ne_states(country = "australia", returnclass = "sf") %>%
dplyr::select(name, type, adm1_code, geometry)
ozmap_states <- sf::st_as_sf(tibble::as_tibble(ozmap_states))
usethis::use_data(ozmap_states)
library(dplyr)
ozmap_country <- rnaturalearth::ne_countries(country = "australia", returnclass = "sf") %>%
dplyr::select(name, type, adm0_a3, geometry)
ozmap_country <- sf::st_as_sf(tibble::as_tibble(ozmap_country))
usethis::use_data(ozmap_country)
library(rgeos)
ozmap_country <- sf::st_as_sf(tibble::as_tibble(ozmap_country))
usethis::use_data(ozmap_country)
library(ozmaps)
library(ozmaps)
usethis::use_travis()
usethis::use_appveyor()
usethis::use_cran_badge()
usethis::use_coverage()
pkgdown::build_site()
library(dplyr)
library(sf)
library(rmapshaper)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
knitr::read_chunk("data-raw/download_2016.R")
library(ozmaps)
ozmap()
fs <- tibble::tibble(fullname = list.files("../AUG17_AdminBounds_ESRIShapefileorDBFfile_20170821151234/", recursive = TRUE, pattern = "shp$"))
fs
pkgdown::build_site()
fs$fullname[1]
fs <- tibble::tibble(fullname = list.files( recursive = TRUE, pattern = "shp$"))
fs
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_articles()
pkgdown::build_home()
traceback()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_travis()
usethis::use_appveyor()
library(ozmaps)
## @knitr download
#f <- "https://data.gov.au/dataset/bdcf5b09-89bc-47ec-9281-6b8e9ee147aa/resource/cb2d6c1c-fd4c-4fd7-b93b-3796425bc0de/download/aug17adminboundsmapinfotabformat20170828133827.zip"
f <- "https://data.gov.au/dataset/bdcf5b09-89bc-47ec-9281-6b8e9ee147aa/resource/53c24b8e-4f55-4eed-a189-2fc0dcca6381/download/aug17adminboundsesrishapefileordbffile20170821151234.zip"
if (FALSE) {
if (!file.exists(basename(f))) download.file(f, basename(f), mode = "wb")
unzip(basename(f))
}
## @knitr files
library(dplyr)
fs <- tibble::tibble(fullname = list.files( recursive = TRUE, pattern = "shp$"))
## keep file and fullname, a habit of mine
fs <- fs %>% dplyr::mutate(file = basename(fullname)) %>% dplyr::select(file, fullname)
fs
## read all files and bind together in one object
## (I find problems using map_df so I just avoid it
## and ensure sf is attached)
read_psma <- function(x, keep = 1) {
library(sf)
do.call(rbind, purrr::map(x, sf::read_sf))
}
## @knitr build-electoral
# ## electoral (140Mb)
elec <- read_psma(fs %>% dplyr::filter(grepl("STATE_ELECTORAL_POLYGON", file)) %>% dplyr::pull(fullname))
x <- elec[1:4, ]
class(elec)
pryr::object_size(x, x)
pryr::object_size(x)
pryr::object_size(x*2)
pryr::object_size(x$geometry*2)
g <- geojsonio::geojson_json(x)
pryr::object_size(g)
tj <- geojsonio::geo2topo(g)
pryr::object_size(tj)
x <- elec[1:4, ]
g <- geojsonio::geojson_json(x)
tj <- geojsonio::geo2topo(g)
pryr::object_size(x)
pryr::object_size(g)
pryr::object_size(tj)
x <- elec[1:1000, ]
g <- geojsonio::geojson_json(x)
tj <- geojsonio::geo2topo(g)
pryr::object_size(x)
pryr::object_size(g)
pryr::object_size(tj)
usethis::use_data(x)
usethis::use_data(g)
usethis::use_data(tj)
electoral <- rmapshaper::ms_simplify(elec, keep_shapes = TRUE)
pryr::object_size(electoral)
dim(electoral)
dim(elec)
electoral0 <- electoral
electoral <- geojsonio::geo2topo(electoral0[1, ])
electoral <- geojsonio::geo2topo(geojsonio::geo2topo(electoral0))
electoral <- geojsonio::geo2topo(geojsonio::geojson_json(electoral0))
pryr::object_size(electoral)
pryr::object_size(electoral0)
usethis::use_data(electoral0)
usethis::use_data(electoral)
library(ozmaps)
x <- ozmap_data("electoral")
class(electoral)
geojsonio::geojson_sp
geojsonio::geojson_sp.json
geojsonio:::geojson_sp.json
geojsonio:::tosp
gjson <- geojsonio::geojson_json(electoral)
geojsonio::geojson_write(electoral)
tfile <- "myfile.geojson"
out <- sf::st_as_sf(geojsonio::geojson_sp(tfile))
?geojsonio::geojson_sp
out <- sf::st_as_sf(geojsonio::geojson_sp(geojsonio::geojson_read(tfile)))
library(ozmaps)
devtools::install_github("hypertidy/silicate@pslg")
library(silicate)
x <- silicate:::sc_compact(SC(electoral0[1, ]))
x <- silicate:::sc_compact.SC(SC(electoral0[1, ]))
x
pryr::object_size(electoral0[1:100, ])
x <- silicate:::sc_compact.SC(SC(electoral0[1:100, ]))
pryr::object_size(x)
x <- silicate:::sc_compact.SC(SC(electoral0[1:1000, ]))
pryr::object_size(x)
pryr::object_size(electoral0[1:1000, ])
x <- silicate:::sc_compact.SC(SC(electoral0))
pryr::object_size(x)
pryr::object_size(electoral0)
devtools::use_data(x)
devtools::use_data(electoral0)
usethis::create_package("ozmaps.data")
usethis::create_package("../ozmaps.data")
usethis::create_package("../ozmapsdata")
install.packages("usethis")
devtools::install_github("r-lib/usethis")
usethis::create_package("../ozmaps.data")
library(ozmaps)
ozmaps::electoral
devtools::load_all(".")
class(electoral)
str(electoral)
